

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id         Int       @id @default(autoincrement())
  fullName   String
  email      String    @unique
  password   String
  image      String?   // Profile picture
  gender     String?
  dob        DateTime?
  phone      String?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    DateTime  @deletedAt
  occupation String

  
}

model Tag {
  tagName String
  id      Int
  slug    String    @unique
  isActive   Boolean   @default(true)

}

model Category {
  name        String
  id          Int
  slug        String    @unique
  isActive    Boolean   @default(true)

}

model Blog {
  id             Int       @id @default(autoincrement())
  title          String?
  slug           String    @unique
  content        String
  image          String?
  metaTitle      String?
  metaDescription String?
  canonicalUrl   String?
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  postedAt       DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isPublished    Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  isActive       Boolean   @default(true)
  status         String    @default("draft") // e.g., draft, published, archived
  readingTime    Int?      // estimated in minutes
  excerpt        String?   // short summary or preview
  comments       Comment[] // one-to-many with Comment 
  
  authorId       Int @unique
  tagList        Tags[] // one-to-many with Tags
  categoryList   Category[] // one-to-many with Category  
  likes      Int       @default(0)
  dislikes   Int       @default(0)
  views      Int       @default(0)          
 
}

model Comment {
  commentId          Int       @id @default(autoincrement())
  blogId      Int       @unique
  blog        Blog      @relation(fields: [blogId], references: [id])
  content     String?
  isActive    Boolean   @default(true)
  deleted     Boolean   @default(false)
  isApproved  Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  
}

model Subcomment {
  commentId Int?
  userId    Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  isActive    Boolean   @default(true)
  deleted     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isApproved  Boolean
  isPublished Boolean   @default(false)
  blogId      Int?

}

model Author {
  id         Int       @id @default(autoincrement())
  fullName   String
  email      String    @unique
  password   String
  image      String?   // Profile picture
  gender     String?
  dob        DateTime?
  phone      String?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    DateTime  @deletedAt
  occupation String

}
